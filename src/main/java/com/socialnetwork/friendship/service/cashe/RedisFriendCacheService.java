package com.socialnetwork.friendship.service.cashe;

import com.socialnetwork.friendship.model.FriendshipRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class RedisFriendCacheService {

    private final RedisTemplate<String, Object> redisTemplate;

    private String keyPending(UUID userId) {
        return "friends:pending:" + userId;
    }

    private String keyFriends(UUID userId) {
        return "friends:list:" + userId;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ pending
    public void addPendingRequest(UUID receiverId, FriendshipRequest request) {
        redisTemplate.opsForList().rightPush(keyPending(receiverId), request);
        log.info("üíæ Redis: –¥–æ–±–∞–≤–ª–µ–Ω pending –∑–∞–ø—Ä–æ—Å –¥–ª—è {}", receiverId);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ pending
    public void removePendingRequest(UUID receiverId, Long requestId) {
        redisTemplate.opsForList().remove(keyPending(receiverId), 1, requestId);
        log.info("üóë Redis: —É–¥–∞–ª—ë–Ω –∑–∞–ø—Ä–æ—Å {} –∏–∑ pending –¥–ª—è {}", requestId, receiverId);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥—Ä—É–∂–±—ã
    public void saveFriends(UUID user1, UUID user2) {
        redisTemplate.opsForSet().add(keyFriends(user1), user2.toString());
        redisTemplate.opsForSet().add(keyFriends(user2), user1.toString());
        log.info("ü§ù Redis: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥—Ä—É–∂–±–∞ {} ‚Üî {}", user1, user2);
    }
}



